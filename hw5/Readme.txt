Example implementation of Decaf AST builder and Type checker.	
Report errors to Yuxuan Shui and C. R. Ramakrishnan

README.txt:	this file
decaflexer.py	PLY/lex specification of Decaf tokens.
                Also defines "errorflag" used to signal error during scanning/parsing.
decafparser.py	PLY/yacc specification of Decaf grammar.
                The encoded grammar rules appear in the same order as in decaf manual.
                Defines "from_file" function that takes a file name
                and parses that file's contents. "from_file" returns
                True if no error, and False if error.

ast.py		Class structure and functions for AST construction and type checking

decafc.py	Driver: processes arguments and gets file name to pass to decafparser.from_file
            Decaf programs are assumed to be in files with ".decaf" suffix.
            Argument given to decafch may omit this suffix; e.g.
				python decafch test
            will read from test.decaf.

codegen.py  Input for this file is parse tree which is generated by ast.py
            output is the corresponding machine instructions for the given decaf program
            
            Traverses the parse tree and generates machine code accordingly. Handles short circuit evaluation for 'AND' and 'OR'.
            Index in ArrayAccessExpression can be of any kind such as fieldAccess and ArrayAccess.
            As 'eq' and 'neq' have no machine instructions we have simulated them as follows:
            'eq':
                    1) store result of geq in register r1
                    2) store result of leq in register r2
                    3) multiply r1 and r2
            'neq':
                    1) store result of geq in register r1
                    2) store result of leq in register r2
                    3) add r1 and r2
            
absmc.py    Class structure and functions for Abstract register Machine code generation

Assumption:
    One main method in entire program and main should be 'static and 'public' and named exactly 'main'.